openapi: "3.0.3"
info:
  title: "rabbit_backend API"
  description: "rabbit_backend API"
  version: "1.0.0"
servers:
  - url: "http://0.0.0.0:8080"
tags:
  - name: auth
    description: Auth API
  - name: habits
    description: Habits API
  - name: events
    description: Events API
paths:
  /auth/login:
    post:
      tags:
        - auth
      description: log in by user
      requestBody:
        description: A JSON object containing login password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /auth/registration:
    post:
      tags:
        - auth
      description: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /auth/changePassword:
    post:
      tags:
        - auth
      description: Change user's password
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePassword"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangePassword"
  /auth/isChatIdExist/{chatId}:
    get:
      tags:
        - auth
      description: Check user with chatId exist
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: int64
      responses:
        200:
          description: "Ok"
  /habits:
    get:
      tags:
        - habits
      description: "Get all habits"
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Habit"

  /habits/add:
    post:
      tags:
        - habits
      description: "Add a new habit"
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Habit"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Habit"
        400:
          description: "Invalid input"

  /habits/edit:
    post:
      tags:
        - habits
      description: "Edit a habit"
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Habit"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                type: boolean
        400:
          description: "Invalid input"

  /habits/{id}:
    get:
      tags:
        - habits
      description: "Get habit by id"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of habit to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Habit"

  /habits/delete/{id}:
    post:
      tags:
        - habits
      description: "Delete habit by id"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of habit to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                type: boolean

  /events:
    get:
      tags:
        - events
      description: "Get all events"
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"

  /events/add:
    post:
      tags:
        - events
      description: "Add a new events"
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        400:
          description: "Invalid input"

  /events/add/bulk:
    post:
      tags:
        - events
      description: "Add some events with date"
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventBulk"
      responses:
        200:
          description: "Ok"
        400:
          description: "Invalid input"

  /events/edit:
    post:
      tags:
        - events
      description: "Edit an event"
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                type: boolean
        400:
          description: "Invalid input"

  /events/{date}:
    get:
      tags:
        - events
      description: "Get events by date"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: date
          in: path
          description: Date of event to return
          required: true
          schema:
            type: string
            format: date
            example: 2023-12-31
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"

  /events/delete/{id}:
    post:
      tags:
        - events
      description: "Delete event by id"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of event to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                type: boolean

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          example: login@gm.com
        password:
          type: string
          format: password
          example: password
        chatId:
          type: string
          example: 48574987
          required: false
    ChangePassword:
      type: object
      properties:
        email:
          type: string
          format: email
          example: login@gm.com
        currentPassword:
          type: string
          format: password
          example: password
        newPassword:
          type: string
          format: password
          example: password
    Habit:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: sport
        isGood:
          type: boolean
          example: true
    Event:
      type: object
      properties:
        id:
          type: integer
          example: 1
        date:
          type: string
          example: 2024-12-31
        habitId:
          type: integer
          example: 1
    EventBulk:
      type: object
      properties:
        dates:
          type: array
          format: date
          example: [ 2023-12-01, 2023-12-02, 2023-12-03 ]
        habitId:
          type: integer
          example: 1